MVVM

1. How do you implement MVVM in your app or walk me through MVVM implementation
Answer:

In MVVM, we separate concerns into three layers: Model, ViewModel, and View to improve maintainability and testability.

Model:
This layer handles data sources, such as API calls, databases, or local storage.
It provides data to the ViewModel via repositories, ensuring the UI layer doesn’t directly access business logic.

ViewModel:
Acts as an intermediary between the View and Model.
It holds UI-related data, handles business logic, and survives configuration changes.
Uses LiveData (or StateFlow) to expose data to the UI reactively.

View:
The UI layer (Activity/Fragment/Composable) observes ViewModel’s LiveData to get updates.
It reacts to UI state changes but does not handle any business logic.
Ensures a one-way data flow, improving testability.

Workflow Example:
The ViewModel fetches data from the Repository (inside the Model layer).
The Repository gets data from a local database or API.
The ViewModel processes and exposes the data to the View.
The View (UI) observes LiveData and updates accordingly.

2. What are the advantages of MVVM?
Answer:
MVVM provides multiple benefits over traditional architectures like MVC:

Separation of Concerns:
UI logic (View), business logic (ViewModel), and data handling (Model) are independent, making the code modular.

Better Testability:
The ViewModel doesn’t depend on the UI, making unit testing more effective.

Improved Lifecycle Management:
The ViewModel survives configuration changes like screen rotations, preventing data loss.

One-Way Data Flow:
The ViewModel exposes immutable LiveData (or StateFlow) that the UI observes, reducing unintended side effects.

Scalability and Maintainability:
Code is easier to manage, refactor, and scale as app complexity grows.

3. What is LiveData and Advantages of LiveData?
Answer:
LiveData is a lifecycle-aware observable data holder used to update the UI reactively.
Advantages of LiveData:

Lifecycle Awareness:
LiveData only updates active UI components (Activity/Fragment), preventing memory leaks.

Automatic UI Updates:
When data changes, the UI updates automatically, reducing the need for manual UI handling.

No Memory Leaks:
Lifecycle-aware behavior ensures LiveData doesn’t retain references to destroyed UI components.

Thread Safety:
LiveData can be updated on background threads, and it posts updates safely to the main thread.

Better Decoupling:
The ViewModel exposes LiveData, and the View observes it, ensuring a one-way dependency from UI to business logic.

4. What are the disadvantages of LiveData?
Answer:
Despite its advantages, LiveData has some limitations:

Not Suitable for One-Time Events (Single Event UI Handling):
LiveData retains data even after consumption, leading to unintended re-triggering when observing.
Solution: Use EventWrapper or alternatives like StateFlow.

Not Ideal for Complex Data Transformations:
LiveData requires MediatorLiveData for transformations, which can be cumbersome.

Limited to UI State Management:
LiveData is tightly coupled with the lifecycle, making it less useful for non-UI-related business logic.
Solution: Use Flow or RxJava for more flexible reactive programming.

5. What is the relationship between viewModel and activity life cycle events?
Answer:

ViewModel Survives Configuration Changes:
When an Activity is recreated (e.g., due to rotation), the ViewModel instance persists, preventing data loss.

ViewModel is Scoped to Lifecycle Owners:
It is tied to the Activity/Fragment lifecycle but not destroyed with UI changes unless explicitly cleared.

ViewModel Cleared on Final Activity Destruction:
When an Activity is fully destroyed (e.g., user navigates back), ViewModel’s onCleared() is called to release resources.

ViewModel Prevents Memory Leaks:
Unlike an Activity, which holds references to UI components, the ViewModel exists independently and holds only LiveData or StateFlow references, avoiding leaks.

6. LiveData vs MutableLiveData vs ObservableField?
LiveData:
A lifecycle-aware observable data holder. It allows UI components to observe changes in data and update automatically. LiveData is immutable, meaning its value cannot be changed directly.

MutableLiveData:
A subclass of LiveData that allows you to modify its value using setValue() or postValue(). It is commonly used in ViewModels to expose data to the UI.

ObservableField:
A wrapper class that makes a single field observable. It is part of the Data Binding library and is useful for binding UI elements to data. Unlike LiveData, it is not lifecycle-aware.

7. setValue() vs postValue() method of MutableLiveDate object?
setValue():
Updates the value of MutableLiveData synchronously on the main thread.
Use this method when you are already on the main thread (e.g., in UI events like button clicks).

postValue():
Updates the value of MutableLiveData asynchronously by posting the update to the main thread. If you call postValue() multiple times in quick succession, only the last value will be dispatched.
Use this method when you are on a background thread (e.g., in a network callback or coroutine).

8. What is DataBinding?
Data Binding is a library in Android that allows you to bind UI components in your XML layouts directly to data sources (e.g., ViewModel, LiveData, or ObservableFields) in a declarative way. It eliminates the need for boilerplate code like findViewById and manual UI updates.

Key Features
Declarative UI: Define binding logic directly in XML.
Reduced Boilerplate: No need for findViewById or manual UI updates.
Type Safety: Binding expressions are checked at compile time.
Reactive Updates: Automatically updates the UI when data changes.

9. What are the advantages of data binding?
Reduces Boilerplate Code:
Eliminates the need for findViewById and manual UI updates.

Improved Readability:
Binding logic is moved to XML, making the code cleaner and easier to understand.

Type Safety:
Binding expressions are checked at compile time, reducing runtime errors.

Reactive Updates:
Automatically updates the UI when the underlying data changes (e.g., with LiveData or ObservableField).

2-Way Data Binding:
Allows the UI to update the data source and vice versa (e.g., for EditText fields).

Better Separation of Concerns:
Keeps UI logic in XML and business logic in ViewModel or other components.

10. What are 1-Way Data Binding and 2-Way Data Binding?
1-Way Data Binding:
Data flows in one direction—from the data source (e.g., ViewModel) to the UI. Changes in the data automatically update the UI, but changes in the UI do not update the data source.
Displaying data in TextView, ImageView, etc.

2-Way Data Binding:
Data flows in both directions—from the data source to the UI and from the UI to the data source. Changes in the UI (e.g., user input) automatically update the data source, and changes in the data source automatically update the UI.
Input fields like EditText where user input needs to update the data source.

11. What is BindingAdapter? Why is there a need for BindingAdapter?
12. How to define BindingAdapter?
13. How to bind an image url to ImageView to load and display image in ImageView using DataBinding?
14. What is ViewBinding?
15. What is the advantage of using ViewModel?
16. How does view binding work internally?
17. Walk-through of MVVM implementation with Repository pattern dealing with data in both local and remote data sources.
18. How would you handle the scenario when the user press home or back button for your viewmodel to make sure the jobs are canceled
19. Can you use livedata in RoomDB queries? How would you update the change in database to your view?
20. How would you set up the architecture when you have both remote and local data sources? Would you use a repository or anything?
21. How to communicate viewmodel and repository once you got the data back
22. Can you have context object in viewmodel?
23. Can you have activity context in viewmodel?
24. Walk-through of DataBinding?
25. What is SharedViewModel?
26. Explain how to use a shared view model to send data from one fragment to another fragment in the same activity.
27. How do we ignore ViewBinding class creation for some layout files?
28. What is ViewModelFactory and why do we need ViewModelFactory?
29. What are the differences between MVI and MVVM, and which one would you prefer?
30. How exactly viewmodel survives orientation change?
When the screen is rotated, the current activity is destroyed, but we have the viewmodelstore which is an internal component
that holds the viewmodel 	instance reference. And it will retain the instance as long as the associated activity is not completely finished like when the app is closed.
And then after the recreation of the activity, the viewmodelprovider will be 	triggered again, it will check the hashmap in the viewmodel store.
For this hashmap, the key is a string which represents the activity class, and the value is the associated viewmodel.
So if it can not find such a key that of 	this particular activity then it will create a new viewmodel.
But in our case, before the orientation change, there is already an existing viewmodel instance, so it will just reuse that viewmodel to restore former states.
In this way, the viewmodel 	survives the orientation change.	
